{"ast":null,"code":"let socket;\nexport default {\n  name: \"Chat\",\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      chatGroupList: [],\n      activeChatUserId: 0,\n      form: {},\n      chatList: [],\n      audio: null,\n      isChatOpen: false // 用于判断聊天界面是否打开\n    };\n  },\n\n  created() {\n    this.init();\n    this.loadChatGroup();\n    this.loadAudio(); // 加载音频\n  },\n\n  watch: {\n    isChatOpen(nweVal) {\n      if (nweVal) {\n        // 当聊天界面打开时，立即加载聊天信息\n        this.loadChatList(this.activeChatUserId);\n      }\n    }\n  },\n  methods: {\n    loadAudio() {\n      const audioUrl = require('@/assets/audio/chat.mp3');\n      this.audio = new Audio(audioUrl); //替换为你的音频文件路径\n      this.audio.volume = 1; // 设置音量（0.0到1.0之间）\n    },\n\n    closeGroup(id) {\n      this.$request.delete('/chatGroup/delete/' + id).then(res => {\n        this.loadChatGroup();\n        this.chatList = []; // 清空聊天消息\n      });\n    },\n\n    send() {\n      if (!this.activeChatUserId) {\n        this.$message.warning('请选择聊天对象');\n        return;\n      }\n      if (!this.form.text) {\n        this.$message.warning('请输入消息内容');\n        return;\n      }\n      this.form.chatUserId = this.activeChatUserId;\n      this.form.userId = this.user.id;\n      this.$request.post('/chatInfo/add', this.form).then(res => {\n        this.form = {};\n        this.loadChatList(this.activeChatUserId);\n\n        // 发送socket消息\n        socket.send(this.user.id); //传递自己id以便接收消息语音提醒\n      });\n    },\n\n    loadChatList(chatUserId) {\n      this.isChatOpen = true;\n      this.form = {};\n      this.activeChatUserId = chatUserId;\n\n      // 更新消息读取状态\n      this.$request.put('/chatInfo/updateRead/' + chatUserId).then(res => {\n        this.loadChatGroup();\n      });\n      this.$request.get('/chatInfo/selectUserChat/' + chatUserId).then(res => {\n        if (res.code == '200') {\n          this.chatList = res.data || [];\n          // 使用 Vue 的 $nextTick 确保 DOM 更新完成后再滚动  \n          this.$nextTick(() => {\n            if (this.isChatOpen) {\n              // 当聊天界面打开时，滚动到底部\n              const chatContainer = this.$refs.chatContainer; // 使用 Vue 的 ref 访问元素 \n              if (chatContainer) {\n                // 直接设置滚动容器的 scrollTop 为其 scrollHeight 来滚动到底部  \n                chatContainer.scrollTop = chatContainer.scrollHeight;\n              }\n            }\n          });\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    loadChatGroup() {\n      this.$request.get('/chatGroup/selectUserGroup').then(res => {\n        this.chatGroupList = res.data || [];\n      });\n    },\n    init() {\n      let _this = this;\n      if (typeof WebSocket == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\");\n      } else {\n        console.log(\"您的浏览器支持WebSocket\");\n        let socketUrl = \"ws://localhost:9020/chatServer/\" + this.user.id;\n        if (socket != null) {\n          socket.close();\n          socket = null;\n        }\n        // 开启一个websocket服务\n        socket = new WebSocket(socketUrl);\n        //打开事件\n        socket.onopen = function () {\n          console.log(\"websocket已打开\");\n        };\n        //  浏览器端收消息，获得从服务端数据库里的最新的聊天消息\n        socket.onmessage = function (msg) {\n          let userId = JSON.parse(msg.data);\n          if (userId == _this.user.id) {\n            _this.loadChatGroup();\n            _this.loadChatList(_this.activeChatUserId);\n          } else {\n            _this.loadChatGroup();\n            _this.loadChatList(_this.activeChatUserId);\n\n            // 播放音频\n            _this.audio.currentTime = 0; // 重置播放位置\n            _this.audio.play();\n          }\n        };\n        //关闭事件\n        socket.onclose = function () {\n          console.log(\"websocket已关闭\");\n        };\n        //发生了错误事件\n        socket.onerror = function () {\n          console.log(\"websocket发生了错误\");\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["socket","name","data","user","JSON","parse","localStorage","getItem","chatGroupList","activeChatUserId","form","chatList","audio","isChatOpen","created","init","loadChatGroup","loadAudio","watch","nweVal","loadChatList","methods","audioUrl","require","Audio","volume","closeGroup","id","$request","delete","then","res","send","$message","warning","text","chatUserId","userId","post","put","get","code","$nextTick","chatContainer","$refs","scrollTop","scrollHeight","error","msg","_this","WebSocket","console","log","socketUrl","close","onopen","onmessage","currentTime","play","onclose","onerror"],"sources":["src/views/front/Chat.vue"],"sourcesContent":["<template>\r\n  <div style=\"width: 60%; margin: 10px auto\">\r\n\r\n    <div style=\"display: flex; grid-gap: 20px\">\r\n\r\n      <!-- 聊天组开始 -->\r\n      <div class=\"chat-card\" style=\"width: 200px; min-height: 600px\">\r\n        <div v-if=\"chatGroupList.length > 0\" @click=\"loadChatList(item.chatUserId)\" v-for=\"item in chatGroupList\" :key=\"item.id\">\r\n          <div style=\"position: relative\" v-if=\"item.userId === user.id\" class=\"chat-group\" :class=\"{'chat-group-active' : item.chatUserId === activeChatUserId}\">\r\n            <img :src=\"item.chatUserAvatar\" style=\"width: 50px; height: 50px; border-radius: 50%\" />\r\n            <el-badge :value=\"item.chatNum\" :max=\"99\" v-if=\"item.chatNum > 0 && !activeChatUserId\">\r\n              <span style=\"color: #333\">{{ item.chatUserName }}</span>\r\n            </el-badge>\r\n            <span v-else style=\"color: #333\">{{ item.chatUserName }}</span>\r\n\r\n            <i class=\"el-icon-close\" style=\"position: absolute; top: 10px; right: 10px\" @click.stop=\"closeGroup(item.id)\"></i>\r\n          </div>\r\n        </div>\r\n        <div v-if=\"chatGroupList.length === 0\" style=\"color: #666; padding: 20px 0; text-align: center\">暂无聊天对象..</div>\r\n      </div>\r\n      <!-- 聊天组结束 -->\r\n\r\n      <!-- 聊天消息开始 -->\r\n      <div class=\"chat-card\" style=\"flex: 1; height: 600px\">\r\n        <div v-if=\"isChatOpen\" class=\"chat-text\" ref=\"chatContainer\" style=\"height: 450px; border-bottom: 1px solid #ddd; overflow-y: auto;\">\r\n          <div v-for=\"item in chatList\" :key=\"item.id\" style=\"margin-bottom: 20px\">\r\n\r\n            <!-- 左边的聊天消息开始 -->\r\n            <!-- item.chatUserId === user.id 表示对方在跟当前登录的人聊天 user表示对方  显示对方的名称和头像        -->\r\n            <div v-if=\"item.chatUserId === user.id\">\r\n                <div style=\"color: #666; font-size: 12px; padding: 5px 0; margin: 5px 0; text-align: center;\">{{ item.time }}</div>\r\n                <div style=\"display: flex; grid-gap: 10px\">\r\n                    <img style=\"width: 50px; height: 50px; border-radius: 5px\" :src=\"item.userAvatar\" alt=\"\">\r\n                    <div style=\"max-width: 50%; width: fit-content\">\r\n                    <div style=\"color: #666; margin-bottom: 5px\">\r\n                        <span>{{ item.userName }}</span>\r\n                    </div>\r\n                    <div style=\"background-color: #d1e7ff; padding: 10px; border-radius: 5px;\" v-text=\"item.text\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- 左边的聊天消息结束 -->\r\n\r\n            <!-- 右边的聊天消息开始 -->\r\n            <div v-if=\"item.userId === user.id\">\r\n                <div style=\"color: #666; font-size: 12px; padding: 5px 0; margin: 5px 0; text-align: center;\">{{ item.time }}</div>\r\n                <div style=\"display: flex; justify-content: right; grid-gap: 10px\">\r\n                  <div style=\"max-width: 50%; width: fit-content\">\r\n                    <div style=\"color: #666; margin-bottom: 5px; text-align: right\">{{ item.userName }}</div>\r\n                    <div style=\"background-color: #a3eecb; padding: 10px; border-radius: 5px;\" v-text=\"item.text\"></div>\r\n                  </div>\r\n                  <img style=\"width: 50px; height: 50px; border-radius: 5px\" :src=\"item.userAvatar\" alt=\"\">\r\n                </div>\r\n            </div>\r\n            <!-- 右边的聊天消息结束 -->\r\n            \r\n          </div>\r\n        </div>\r\n        <!-- 聊天消息结束 -->\r\n\r\n        <!-- 聊天输入框开始 -->\r\n        <div style=\"height: 150px\">\r\n          <textarea v-model=\"form.text\" style=\"height: 100px; width: 100%; padding: 20px; border: none;\r\n             border-bottom: 1px solid #ddd; outline: none\"></textarea>\r\n          <div style=\"text-align: right; padding-right: 10px\">\r\n            <el-button type=\"primary\" size=\"mini\" @click=\"send\">发送</el-button>\r\n          </div>\r\n        </div>\r\n        <!-- 聊天输入框结束 -->\r\n\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nlet socket\r\n\r\nexport default {\r\n  name: \"Chat\",\r\n  data() {\r\n    return {\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      chatGroupList: [],\r\n      activeChatUserId: 0,\r\n      form: {},\r\n      chatList: [],\r\n      audio: null,\r\n      isChatOpen: false, // 用于判断聊天界面是否打开\r\n    }\r\n  },\r\n  created() {\r\n    this.init()\r\n    this.loadChatGroup()\r\n    this.loadAudio() // 加载音频\r\n  },\r\n  watch: {\r\n    isChatOpen(nweVal){\r\n      if(nweVal){ // 当聊天界面打开时，立即加载聊天信息\r\n        this.loadChatList(this.activeChatUserId)\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    loadAudio(){\r\n        const audioUrl = require('@/assets/audio/chat.mp3');  \r\n        this.audio = new Audio(audioUrl);  //替换为你的音频文件路径\r\n        this.audio.volume = 1 // 设置音量（0.0到1.0之间）\r\n    },\r\n    closeGroup(id) {\r\n      this.$request.delete('/chatGroup/delete/' + id).then(res => {\r\n        this.loadChatGroup()\r\n        this.chatList = []  // 清空聊天消息\r\n      })\r\n    },\r\n    send() {\r\n      if (!this.activeChatUserId) {\r\n        this.$message.warning('请选择聊天对象')\r\n        return\r\n      }\r\n      if (!this.form.text) {\r\n        this.$message.warning('请输入消息内容')\r\n        return\r\n      }\r\n      this.form.chatUserId = this.activeChatUserId\r\n      this.form.userId = this.user.id\r\n      this.$request.post('/chatInfo/add', this.form).then(res => {\r\n        this.form = {}\r\n        this.loadChatList(this.activeChatUserId)\r\n\r\n        // 发送socket消息\r\n        socket.send(this.user.id) //传递自己id以便接收消息语音提醒\r\n      })\r\n    },\r\n    loadChatList(chatUserId) {\r\n      this.isChatOpen = true\r\n      this.form = {}\r\n      this.activeChatUserId = chatUserId\r\n\r\n      // 更新消息读取状态\r\n      this.$request.put('/chatInfo/updateRead/' + chatUserId).then(res => {\r\n        this.loadChatGroup()\r\n      })\r\n      this.$request.get('/chatInfo/selectUserChat/' + chatUserId).then(res => {\r\n        if(res.code == '200'){\r\n            this.chatList = res.data || []\r\n            // 使用 Vue 的 $nextTick 确保 DOM 更新完成后再滚动  \r\n            this.$nextTick(() => {\r\n              if(this.isChatOpen){ // 当聊天界面打开时，滚动到底部\r\n                  const chatContainer = this.$refs.chatContainer; // 使用 Vue 的 ref 访问元素 \r\n                if (chatContainer) {  \r\n                  // 直接设置滚动容器的 scrollTop 为其 scrollHeight 来滚动到底部  \r\n                  chatContainer.scrollTop = chatContainer.scrollHeight;  \r\n                } \r\n              } \r\n            })\r\n        }else{\r\n            this.$message.error(res.msg)\r\n        }\r\n      })\r\n    },\r\n    loadChatGroup() {\r\n      this.$request.get('/chatGroup/selectUserGroup').then(res => {\r\n        this.chatGroupList = res.data || []\r\n      })\r\n    },\r\n    init() {\r\n      let _this = this\r\n      if (typeof (WebSocket) == \"undefined\") {\r\n        console.log(\"您的浏览器不支持WebSocket\")\r\n      } else {\r\n        console.log(\"您的浏览器支持WebSocket\")\r\n        let socketUrl = \"ws://localhost:9020/chatServer/\" + this.user.id\r\n        if (socket != null) {\r\n          socket.close()\r\n          socket = null\r\n        }\r\n        // 开启一个websocket服务\r\n        socket = new WebSocket(socketUrl)\r\n        //打开事件\r\n        socket.onopen = function () {\r\n          console.log(\"websocket已打开\")\r\n        }\r\n        //  浏览器端收消息，获得从服务端数据库里的最新的聊天消息\r\n        socket.onmessage = function (msg) {\r\n          let userId = JSON.parse(msg.data)\r\n          if (userId == _this.user.id) {\r\n            _this.loadChatGroup()\r\n            _this.loadChatList(_this.activeChatUserId)\r\n          }else{\r\n            _this.loadChatGroup()\r\n            _this.loadChatList(_this.activeChatUserId)\r\n\r\n            // 播放音频\r\n            _this.audio.currentTime = 0 // 重置播放位置\r\n            _this.audio.play()\r\n          }\r\n        }\r\n        //关闭事件\r\n        socket.onclose = function () {\r\n          console.log(\"websocket已关闭\")\r\n        }\r\n        //发生了错误事件\r\n        socket.onerror = function () {\r\n          console.log(\"websocket发生了错误\")\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-card {\r\n  background-color: #fff;\r\n  border-radius: 5px;\r\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.1);\r\n}\r\n.chat-group {\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  grid-gap: 10px;\r\n  border-bottom: 1px solid #ddd\r\n}\r\n.chat-group-active {\r\n  background-color: #d1e7ff;\r\n}\r\n.chat-text {\r\n  padding: 20px;\r\n}\r\n.chat-text::-webkit-scrollbar {\r\n  width: 10px;\r\n}\r\n.chat-text::-webkit-scrollbar-thumb {\r\n  border-radius: 8px;\r\n  background-color: #d1e7ff;\r\n}\r\n::v-deep .el-badge__content.is-fixed {\r\n  right: 0px;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}